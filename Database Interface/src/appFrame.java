
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

/**
 * @author Aidan-WC
 */
public class appFrame extends javax.swing.JFrame 
{
    public appFrame() 
    {
        setResizable(false);
        initComponents();
        fsQueries = new FlightSchedulerQueries();
        customerNames = new String[fsQueries.getCustomerNames().size()];
        customerNames = fsQueries.getCustomerNames().toArray(customerNames);
        if(customerNames.length == 0)
        {
            customersBookingCombo.setEnabled(false);
            customersCancelCombo.setEnabled(false);
            customerStatusCombo.setEnabled(false);
        }
        else
        {
            customersBookingCombo.setEnabled(true);
            customersCancelCombo.setEnabled(true);
            customerStatusCombo.setEnabled(true);
        }
        dayDates = new String[fsQueries.getDays().size()];
        dayDates = fsQueries.getDayDates().toArray(dayDates);
        if(dayDates.length == 0)
        {
            daysBookingCombo.setEnabled(false);
            daysStatusCombo.setEnabled(false);
            waitingDaysStatusCombo.setEnabled(false);
            daysCancelCombo.setEnabled(false);
        }
        else
        {
            daysBookingCombo.setEnabled(true);
            daysStatusCombo.setEnabled(true);
            waitingDaysStatusCombo.setEnabled(true);
            daysCancelCombo.setEnabled(true);
        }
        flightNames = new String[fsQueries.getFlightNames().size()];
        flightNames = fsQueries.getFlightNames().toArray(flightNames);
        if(flightNames.length == 0)
        {
            flightsBookingCombo.setEnabled(false);
            flightsStatusCombo.setEnabled(false);
            flightsDropCombo.setEnabled(false);
        }
        else
        {
            flightsBookingCombo.setEnabled(true);
            flightsStatusCombo.setEnabled(true);
            flightsDropCombo.setEnabled(true);
        }
        customersBookingCombo.setModel(new javax.swing.DefaultComboBoxModel<>(customerNames));
        daysBookingCombo.setModel(new javax.swing.DefaultComboBoxModel<>(dayDates));
        flightsBookingCombo.setModel(new javax.swing.DefaultComboBoxModel<>(flightNames));
        daysStatusCombo.setModel(new javax.swing.DefaultComboBoxModel<>(dayDates));
        flightsStatusCombo.setModel(new javax.swing.DefaultComboBoxModel<>(flightNames));
        waitingDaysStatusCombo.setModel(new javax.swing.DefaultComboBoxModel<>(dayDates));
        customerStatusCombo.setModel(new javax.swing.DefaultComboBoxModel<>(customerNames));
        customersCancelCombo.setModel(new javax.swing.DefaultComboBoxModel<>(customerNames));
        daysCancelCombo.setModel(new javax.swing.DefaultComboBoxModel<>(dayDates));
        flightsDropCombo.setModel(new javax.swing.DefaultComboBoxModel<>(flightNames));
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        appLabel = new javax.swing.JLabel();
        tabbedPanel = new javax.swing.JTabbedPane();
        addItemPanel = new javax.swing.JPanel();
        customerLabel = new javax.swing.JLabel();
        customerTextField = new javax.swing.JTextField();
        addCustomerButton = new javax.swing.JButton();
        flightNameLabel = new javax.swing.JLabel();
        dayLabel = new javax.swing.JLabel();
        flightNameTextField = new javax.swing.JTextField();
        flightSeatsLabel = new javax.swing.JLabel();
        flightSeatsTextField = new javax.swing.JTextField();
        addFlightButton = new javax.swing.JButton();
        dateTextField = new javax.swing.JTextField();
        addDateButton = new javax.swing.JButton();
        bookingPanel = new javax.swing.JPanel();
        bookLabel = new javax.swing.JLabel();
        bookingButton = new javax.swing.JButton();
        customersBookingCombo = new javax.swing.JComboBox<>();
        daysBookingCombo = new javax.swing.JComboBox<>();
        flightsBookingCombo = new javax.swing.JComboBox<>();
        bookingCustomerLabel = new javax.swing.JLabel();
        bookingDayLabel = new javax.swing.JLabel();
        bookingFlightLabel = new javax.swing.JLabel();
        cancelPanel = new javax.swing.JPanel();
        cancelCustomerLabel = new javax.swing.JLabel();
        cancelDayLabel = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        customersCancelCombo = new javax.swing.JComboBox<>();
        daysCancelCombo = new javax.swing.JComboBox<>();
        dropPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        dropButton = new javax.swing.JButton();
        flightsDropCombo = new javax.swing.JComboBox<>();
        statusPanel = new javax.swing.JPanel();
        flightDayStatusLabel = new javax.swing.JLabel();
        waitingListDayStatusLabel = new javax.swing.JLabel();
        statusFlightDayButton = new javax.swing.JButton();
        statusWaitingListButton = new javax.swing.JButton();
        waitingDaysStatusCombo = new javax.swing.JComboBox<>();
        flightsStatusCombo = new javax.swing.JComboBox<>();
        daysStatusCombo = new javax.swing.JComboBox<>();
        statusFlightLabel = new javax.swing.JLabel();
        statusDayLabel = new javax.swing.JLabel();
        customerStatusLabel = new javax.swing.JLabel();
        customerStatusCombo = new javax.swing.JComboBox<>();
        customerStatusButton = new javax.swing.JButton();
        statusScrollPane = new javax.swing.JScrollPane();
        statusTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        appLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        appLabel.setText("Flight Scheduler");

        customerLabel.setText("Customer Name:");

        customerTextField.setColumns(30);

        addCustomerButton.setText("Add");
        addCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCustomerButtonActionPerformed(evt);
            }
        });

        flightNameLabel.setText("Flight Name:");

        dayLabel.setText("Date: (dd/MM/yyyy)");

        flightNameTextField.setColumns(10);

        flightSeatsLabel.setText("Flight Seats:");

        flightSeatsTextField.setColumns(10);

        addFlightButton.setText("Add");
        addFlightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFlightButtonActionPerformed(evt);
            }
        });

        dateTextField.setColumns(30);

        addDateButton.setText("Add");
        addDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addItemPanelLayout = new javax.swing.GroupLayout(addItemPanel);
        addItemPanel.setLayout(addItemPanelLayout);
        addItemPanelLayout.setHorizontalGroup(
            addItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addItemPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(customerLabel)
                    .addComponent(flightNameLabel)
                    .addComponent(dayLabel))
                .addGap(18, 18, 18)
                .addGroup(addItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dateTextField)
                    .addGroup(addItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(addItemPanelLayout.createSequentialGroup()
                            .addComponent(flightNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(flightSeatsLabel)
                            .addGap(18, 18, 18)
                            .addComponent(flightSeatsTextField))
                        .addComponent(customerTextField, javax.swing.GroupLayout.Alignment.LEADING)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addGroup(addItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addCustomerButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addFlightButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addDateButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        addItemPanelLayout.setVerticalGroup(
            addItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addItemPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerLabel)
                    .addComponent(customerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addCustomerButton))
                .addGap(18, 18, 18)
                .addGroup(addItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(flightNameLabel)
                    .addComponent(flightNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(flightSeatsLabel)
                    .addComponent(flightSeatsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addFlightButton))
                .addGap(18, 18, 18)
                .addGroup(addItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dayLabel)
                    .addComponent(dateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addDateButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabbedPanel.addTab("Add Items", addItemPanel);

        bookLabel.setText("Book:");

        bookingButton.setText("Book");
        bookingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookingButtonActionPerformed(evt);
            }
        });

        customersBookingCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1" }));

        daysBookingCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        flightsBookingCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        bookingCustomerLabel.setText("Customer:");

        bookingDayLabel.setText("Day:");

        bookingFlightLabel.setText("Flight:");

        javax.swing.GroupLayout bookingPanelLayout = new javax.swing.GroupLayout(bookingPanel);
        bookingPanel.setLayout(bookingPanelLayout);
        bookingPanelLayout.setHorizontalGroup(
            bookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bookingPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bookLabel)
                .addGap(18, 18, 18)
                .addGroup(bookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(customersBookingCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bookingCustomerLabel))
                .addGap(18, 18, 18)
                .addGroup(bookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(daysBookingCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bookingDayLabel))
                .addGap(18, 18, 18)
                .addGroup(bookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bookingPanelLayout.createSequentialGroup()
                        .addComponent(flightsBookingCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bookingButton))
                    .addComponent(bookingFlightLabel))
                .addContainerGap())
        );
        bookingPanelLayout.setVerticalGroup(
            bookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookingCustomerLabel)
                    .addComponent(bookingDayLabel)
                    .addComponent(bookingFlightLabel))
                .addGap(18, 18, 18)
                .addGroup(bookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookLabel)
                    .addComponent(customersBookingCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(daysBookingCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(flightsBookingCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bookingButton))
                .addContainerGap(124, Short.MAX_VALUE))
        );

        tabbedPanel.addTab("Book Customer", bookingPanel);

        cancelCustomerLabel.setText("Customer:");

        cancelDayLabel.setText("Day:");

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        customersCancelCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        daysCancelCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout cancelPanelLayout = new javax.swing.GroupLayout(cancelPanel);
        cancelPanel.setLayout(cancelPanelLayout);
        cancelPanelLayout.setHorizontalGroup(
            cancelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cancelPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cancelCustomerLabel)
                .addGap(18, 18, 18)
                .addComponent(customersCancelCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cancelDayLabel)
                .addGap(18, 18, 18)
                .addComponent(daysCancelCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 238, Short.MAX_VALUE)
                .addComponent(cancelButton)
                .addContainerGap())
        );
        cancelPanelLayout.setVerticalGroup(
            cancelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cancelPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cancelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelCustomerLabel)
                    .addComponent(cancelDayLabel)
                    .addComponent(cancelButton)
                    .addComponent(customersCancelCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(daysCancelCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(158, Short.MAX_VALUE))
        );

        tabbedPanel.addTab("Cancel", cancelPanel);

        jLabel1.setText("Flight:");

        dropButton.setText("Drop");
        dropButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropButtonActionPerformed(evt);
            }
        });

        flightsDropCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout dropPanelLayout = new javax.swing.GroupLayout(dropPanel);
        dropPanel.setLayout(dropPanelLayout);
        dropPanelLayout.setHorizontalGroup(
            dropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dropPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(flightsDropCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 400, Short.MAX_VALUE)
                .addComponent(dropButton)
                .addContainerGap())
        );
        dropPanelLayout.setVerticalGroup(
            dropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dropPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(dropButton)
                    .addComponent(flightsDropCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(158, Short.MAX_VALUE))
        );

        tabbedPanel.addTab("Drop", dropPanel);

        flightDayStatusLabel.setText("Status by Flight and Day:");

        waitingListDayStatusLabel.setText("Status by Waiting List by Day:");

        statusFlightDayButton.setText("Status");
        statusFlightDayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusFlightDayButtonActionPerformed(evt);
            }
        });

        statusWaitingListButton.setText("Status");
        statusWaitingListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusWaitingListButtonActionPerformed(evt);
            }
        });

        waitingDaysStatusCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        flightsStatusCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        daysStatusCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        statusFlightLabel.setText("Flight:");

        statusDayLabel.setText("Day:");

        customerStatusLabel.setText("Status by Customer:");

        customerStatusCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        customerStatusButton.setText("Status");
        customerStatusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerStatusButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(waitingListDayStatusLabel)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusPanelLayout.createSequentialGroup()
                            .addComponent(flightDayStatusLabel)
                            .addGap(45, 45, 45)
                            .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(statusFlightLabel)
                                .addComponent(flightsStatusCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(customerStatusCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(customerStatusLabel))
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(statusPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(statusPanelLayout.createSequentialGroup()
                                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(daysStatusCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(waitingDaysStatusCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 174, Short.MAX_VALUE)
                                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(statusFlightDayButton, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(statusWaitingListButton, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addContainerGap())
                            .addComponent(statusDayLabel)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(customerStatusButton)
                        .addContainerGap())))
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusFlightLabel)
                    .addComponent(statusDayLabel))
                .addGap(18, 18, 18)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(flightDayStatusLabel)
                    .addComponent(statusFlightDayButton)
                    .addComponent(flightsStatusCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(daysStatusCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(waitingListDayStatusLabel)
                    .addComponent(statusWaitingListButton)
                    .addComponent(waitingDaysStatusCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerStatusLabel)
                    .addComponent(customerStatusCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerStatusButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabbedPanel.addTab("Status", statusPanel);

        statusTextArea.setEditable(false);
        statusTextArea.setColumns(20);
        statusTextArea.setLineWrap(true);
        statusTextArea.setRows(5);
        statusScrollPane.setViewportView(statusTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(statusScrollPane)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(appLabel)
                        .addGap(0, 389, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(tabbedPanel)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(appLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tabbedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(statusScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCustomerButtonActionPerformed
        List<Customer> customers = fsQueries.getCustomers();
        boolean isCAvailable = true;
        for(Customer currentC: customers)
        {
            if(customerTextField.getText().equals(currentC.getName()))
                isCAvailable = false;
        }
        if(isCAvailable)
        {
            fsQueries.addCustomer(customerTextField.getText());
            statusTextArea.append("Added customer: " + customerTextField.getText() + "\n");
            customersBookingCombo.setEnabled(true);
            customersCancelCombo.setEnabled(true);
            customerNames = fsQueries.getCustomerNames().toArray(customerNames);
            customersBookingCombo.setModel(new javax.swing.DefaultComboBoxModel<>(customerNames));
            customersCancelCombo.setModel(new javax.swing.DefaultComboBoxModel<>(customerNames));
        }
        else
            statusTextArea.append("Customer already in database. \n");
    }//GEN-LAST:event_addCustomerButtonActionPerformed

    private void bookingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookingButtonActionPerformed
        if(customerNames.length == 0)
        {
            statusTextArea.append("No customer selected. \n");
        }
        else if(dayDates.length == 0)
        {
            statusTextArea.append("No day selected. \n");
        }
        else if(flightNames.length == 0)
        {
            statusTextArea.append("No flight selected. \n");
        }
        else
        {
            String name = customersBookingCombo.getSelectedItem().toString();
            String flight = flightsBookingCombo.getSelectedItem().toString();
            String date = daysBookingCombo.getSelectedItem().toString();
            List<BookingEntry> bookingEntries = fsQueries.getBookings();
            List<BookingEntry> waitBookingEntries = fsQueries.getWaitBookings();
            boolean isBAvailable = true;
            boolean isWAvailable = true;
            
            System.out.println(waitBookingEntries.isEmpty());
            
            if(waitBookingEntries.isEmpty() == false)
            {
                for(BookingEntry currentWB: waitBookingEntries)
                {
                    if(flight.equals(currentWB.getFlight().getName()) && date.equals(currentWB.getDay().getDate().toString()))
                    {
                        if(name.equals(currentWB.getCustomer().getName()))
                        {
                            isWAvailable = false;
                            break;
                        }
                    }
                }
            }
            if(bookingEntries.isEmpty() == false)
            {
                for(BookingEntry currentB: bookingEntries)
                {
                    if(flight.equals(currentB.getFlight().getName()) && date.equals(currentB.getDay().getDate().toString()))
                    {
                        if(name.equals(currentB.getCustomer().getName()))
                        {
                            statusTextArea.append("Booking Already Added \n");
                            isBAvailable = false;
                            break;
                        }
                        else if(fsQueries.getFlightDayBookings(flight, date).size() == fsQueries.getFlightSeats(flight))
                        {
                            isBAvailable = false;
                            if(isWAvailable)
                            {
                                statusTextArea.append("Plane Full. Adding to waitlist. \n");
                                fsQueries.addWaitBooking(name, flight, date);
                                break;
                            }
                            else
                            {
                                statusTextArea.append("Waitlist Booking Already Added \n");
                                break;
                            }
                        }
                    }
                }
            }
            if(isBAvailable)
            {
                fsQueries.addBooking(name, flight, date);
                statusTextArea.append("Added booking under name: " + name + ", flight: " + flight + ", day: " + date + "\n");
                statusTextArea.append("Available Seats on Flight: " + flight + ": " + (fsQueries.getFlightSeats(flight) - fsQueries.getFlightDayBookings(flight, date).size()) + "\n");
            }
        }
    }//GEN-LAST:event_bookingButtonActionPerformed

    private void statusFlightDayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusFlightDayButtonActionPerformed
        if(flightNames.length == 0)
        {
            statusTextArea.append("No flight selected. \n");
        }
        else if(dayDates.length == 0)
        {
            statusTextArea.append("No day selected. \n");
        }
        else
        {
            String flight = flightsStatusCombo.getSelectedItem().toString();
            String date = daysStatusCombo.getSelectedItem().toString();
            List<BookingEntry> bookingEntries = fsQueries.getFlightDayBookings(flight, date);
            
            statusTextArea.append("Status for Flight: " + flight + " on day: " + date + "\n");
            if(bookingEntries.isEmpty())
                statusTextArea.append("Empty flight on this day. \n");
            for(BookingEntry currentB: bookingEntries)
            {
                statusTextArea.append(currentB.getCustomer().getName() + "\n");
            }
        }
    }//GEN-LAST:event_statusFlightDayButtonActionPerformed

    private void statusWaitingListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusWaitingListButtonActionPerformed
        if(dayDates.length == 0)
        {
            statusTextArea.append("No day selected. \n");
        }
        else
        {
            String date = waitingDaysStatusCombo.getSelectedItem().toString();
            List<BookingEntry> bookingEntries = fsQueries.getDayWaitBookings(date);
            
            statusTextArea.append("Status for day: " + date + "\n");
            if(bookingEntries.isEmpty())
                statusTextArea.append("Empty waiting list on this day. \n");
            for(BookingEntry currentB: bookingEntries)
            {
                statusTextArea.append(currentB.getCustomer().getName() + " waiting on flight: " + currentB.getFlight().getName() + "\n");
            }
        }
    }//GEN-LAST:event_statusWaitingListButtonActionPerformed

    private void addFlightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFlightButtonActionPerformed
        List<Flight> flights = fsQueries.getFlights();
        boolean isFAvailable = true;
        for(Flight currentF: flights)
        {
            if(flightNameTextField.getText().equals(currentF.getName()))
                isFAvailable = false;
        }
        if(isFAvailable)
        {
            fsQueries.addFlight(flightNameTextField.getText(), Integer.parseInt(flightSeatsTextField.getText()));
            statusTextArea.append("Added flight: " + flightNameTextField.getText() + " with " + flightSeatsTextField.getText() + " seats. \n");
            flightsBookingCombo.setEnabled(true);
            flightsStatusCombo.setEnabled(true);
            flightsDropCombo.setEnabled(true);
            flightNames = new String[fsQueries.getFlightNames().size()];
            flightNames = fsQueries.getFlightNames().toArray(flightNames);
            flightsBookingCombo.setModel(new javax.swing.DefaultComboBoxModel<>(flightNames));
            flightsStatusCombo.setModel(new javax.swing.DefaultComboBoxModel<>(flightNames));
            flightsDropCombo.setModel(new javax.swing.DefaultComboBoxModel<>(flightNames));
        }
        else
            statusTextArea.append("Flight already in database. \n");
    }//GEN-LAST:event_addFlightButtonActionPerformed

    private void addDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDateButtonActionPerformed
        List<Day> days = fsQueries.getDays();
        boolean isDAvailable = true;
        for(Day currentD: days)
        {
            if(dateTextField.getText().equals(currentD.getDateString()))
                isDAvailable = false;
        }
        if(isDAvailable)
        {
            fsQueries.addDay(new Day(dateTextField.getText()));
            statusTextArea.append("Added day: " + dateTextField.getText() + "\n");
            daysBookingCombo.setEnabled(true);
            daysStatusCombo.setEnabled(true);
            waitingDaysStatusCombo.setEnabled(true);
            daysCancelCombo.setEnabled(true);
            dayDates = new String[fsQueries.getDays().size()];
            dayDates = fsQueries.getDayDates().toArray(dayDates);
            daysBookingCombo.setModel(new javax.swing.DefaultComboBoxModel<>(dayDates));
            daysStatusCombo.setModel(new javax.swing.DefaultComboBoxModel<>(dayDates));
            waitingDaysStatusCombo.setModel(new javax.swing.DefaultComboBoxModel<>(dayDates));
            daysCancelCombo.setModel(new javax.swing.DefaultComboBoxModel<>(dayDates));
        }
        else
            statusTextArea.append("Flight already in database. \n");
    }//GEN-LAST:event_addDateButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        if(customerNames.length == 0)
        {
            statusTextArea.append("No customer selected. \n");
        }
        else if(dayDates.length == 0)
        {
            statusTextArea.append("No day selected. \n");
        }
        else
        {
            String name = customersCancelCombo.getSelectedItem().toString();
            String day = daysCancelCombo.getSelectedItem().toString();
            
            List<BookingEntry> bookingEntries = fsQueries.deleteCustomerDayBooking(name, day);
            Flight availableFlight = bookingEntries.get(0).getFlight();
            statusTextArea.append("Canceled Booking for customer: " + name + " on day " + day + "\n");
            statusTextArea.append("They were on flight: " + availableFlight.getName() + "\n");
            
            List<BookingEntry> waitBookingEntries = fsQueries.getFlightWaitBookings(availableFlight.getName());
            if(waitBookingEntries.isEmpty() == false)
            {
                BookingEntry firstWaitBooking = waitBookingEntries.get(0);
                waitBookingEntries.remove(0);
                for(BookingEntry currentWB : waitBookingEntries)
                {
                    if(currentWB.getTime().before(firstWaitBooking.getTime()))
                        firstWaitBooking = currentWB;
                }
                fsQueries.addBooking(firstWaitBooking.getCustomer().getName(), firstWaitBooking.getFlight().getName(), day);
                fsQueries.deleteCustomerDayWaitBooking(firstWaitBooking.getCustomer().getName(), day);
                statusTextArea.append("First customer on waitlist: " + firstWaitBooking.getCustomer().getName() + " is now placed on flight " + firstWaitBooking.getFlight().getName() + "\n");
                statusTextArea.append("They are now removed from the waitlist.");
            }
            else
            {
                statusTextArea.append("Waitlist empty for this day.");
            }
        }
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void dropButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropButtonActionPerformed
        if(flightNames.length == 0)
        {
            statusTextArea.append("No flight selected. \n");
        }
        else
        {
            String flight = flightsDropCombo.getSelectedItem().toString();
            List<String> days = new ArrayList<String>();
            for(int i = 0; i < dayDates.length; i++)
                days.add(dayDates[i]);
            List<String> flights = new ArrayList<String>();
            for(int i = 0; i < flightNames.length; i++)
                flights.add(flightNames[i]);
            flights.remove(flight);
            
            List<BookingEntry> bookingEntries;
            List<BookingEntry> sortedBookingEntries;
            BookingEntry firstBooking;
            BookingEntry tempBooking;
            
            statusTextArea.append("Dropping Flight " + flight + "\n");
            
            for(String currentD : days)
            {
                statusTextArea.append("Moving bookings for flight: " + flight + " on day " + currentD + "\n");
                bookingEntries = fsQueries.getFlightDayBookings(flight, currentD);
                sortedBookingEntries = new ArrayList<BookingEntry>();
                while(bookingEntries.isEmpty() == false)
                {
                    tempBooking = bookingEntries.get(0);
                    firstBooking = bookingEntries.get(0);
                    bookingEntries.remove(0);
                    for(BookingEntry currentB: bookingEntries)
                    {
                        if(currentB.getTime().before(firstBooking.getTime()))
                            firstBooking = currentB;
                    }
                    if(tempBooking.equals(firstBooking))
                        sortedBookingEntries.add(firstBooking);
                    else
                    {
                        bookingEntries.add(tempBooking);
                        bookingEntries.remove(firstBooking);
                        sortedBookingEntries.add(firstBooking);
                    }
                }
                if(sortedBookingEntries.isEmpty() == false)
                {
                    for(String currentF : flights)
                    {
                        while(fsQueries.getFlightDayBookings(currentF, currentD).size() != fsQueries.getFlightSeats(currentF))
                        {
                            fsQueries.addBooking(sortedBookingEntries.get(0).getCustomer().getName(), currentF, currentD);
                            statusTextArea.append("Moved booking for customer: " + sortedBookingEntries.get(0).getCustomer().getName() + " to " + currentF + "\n");
                            sortedBookingEntries.remove(0);
                        }
                    }
                    if(sortedBookingEntries.isEmpty() == false)
                    {
                        statusTextArea.append("Customers that cannot be rebooked: \n");
                        for(BookingEntry currentB: sortedBookingEntries)
                        {
                            statusTextArea.append(currentB.getCustomer().getName() + '\n');
                            fsQueries.deleteCustomerDayBooking(currentB.getCustomer().getName(), currentD);
                        }
                    }
                }
                else
                {
                    statusTextArea.append("No customers to move. \n");
                }
                fsQueries.deleteFlightDayWaitBookings(flight, currentD);
            }
            
            statusTextArea.append("All waitlist bookings for flight " + flight + " are deleted. \n");
                    
            fsQueries.deleteFlight(flight);
            
            flightNames = new String[fsQueries.getFlightNames().size()];
            flightNames = fsQueries.getFlightNames().toArray(flightNames);
            if(flightNames.length == 0)
            {
                flightsBookingCombo.setEnabled(false);
                flightsStatusCombo.setEnabled(false);
                flightsDropCombo.setEnabled(false);
            }
            else
            {
                flightsBookingCombo.setEnabled(true);
                flightsStatusCombo.setEnabled(true);
                flightsDropCombo.setEnabled(true);
            }
            flightsBookingCombo.setModel(new javax.swing.DefaultComboBoxModel<>(flightNames));
            flightsStatusCombo.setModel(new javax.swing.DefaultComboBoxModel<>(flightNames));
            flightsDropCombo.setModel(new javax.swing.DefaultComboBoxModel<>(flightNames));
        }
    }//GEN-LAST:event_dropButtonActionPerformed

    private void customerStatusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerStatusButtonActionPerformed
        if(customerNames.length == 0)
        {
            statusTextArea.append("No customer selected. \n");
        }
        else
        {
            String name = customerStatusCombo.getSelectedItem().toString();
            List<BookingEntry> bookingEntries = fsQueries.getCustomerBookings(name);
            List<BookingEntry> waitBookingEntries = fsQueries.getCustomerWaitBookings(name);
            
            statusTextArea.append("Status for customer: " + name + "\n");
            statusTextArea.append("Booked Flights:\n");
            for(BookingEntry currentB: bookingEntries)
            {
                statusTextArea.append(currentB.getFlight().getName() + "\n");
            }
            statusTextArea.append("Waitlisted Flights:\n");
            for(BookingEntry currentWB: waitBookingEntries)
            {
                statusTextArea.append(currentWB.getFlight().getName() + "\n");
            }
        }
    }//GEN-LAST:event_customerStatusButtonActionPerformed
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(appFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(appFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(appFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(appFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new appFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCustomerButton;
    private javax.swing.JButton addDateButton;
    private javax.swing.JButton addFlightButton;
    private javax.swing.JPanel addItemPanel;
    private javax.swing.JLabel appLabel;
    private javax.swing.JLabel bookLabel;
    private javax.swing.JButton bookingButton;
    private javax.swing.JLabel bookingCustomerLabel;
    private javax.swing.JLabel bookingDayLabel;
    private javax.swing.JLabel bookingFlightLabel;
    private javax.swing.JPanel bookingPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel cancelCustomerLabel;
    private javax.swing.JLabel cancelDayLabel;
    private javax.swing.JPanel cancelPanel;
    private javax.swing.JLabel customerLabel;
    private javax.swing.JButton customerStatusButton;
    private javax.swing.JComboBox<String> customerStatusCombo;
    private javax.swing.JLabel customerStatusLabel;
    private javax.swing.JTextField customerTextField;
    private javax.swing.JComboBox<String> customersBookingCombo;
    private javax.swing.JComboBox<String> customersCancelCombo;
    private javax.swing.JTextField dateTextField;
    private javax.swing.JLabel dayLabel;
    private javax.swing.JComboBox<String> daysBookingCombo;
    private javax.swing.JComboBox<String> daysCancelCombo;
    private javax.swing.JComboBox<String> daysStatusCombo;
    private javax.swing.JButton dropButton;
    private javax.swing.JPanel dropPanel;
    private javax.swing.JLabel flightDayStatusLabel;
    private javax.swing.JLabel flightNameLabel;
    private javax.swing.JTextField flightNameTextField;
    private javax.swing.JLabel flightSeatsLabel;
    private javax.swing.JTextField flightSeatsTextField;
    private javax.swing.JComboBox<String> flightsBookingCombo;
    private javax.swing.JComboBox<String> flightsDropCombo;
    private javax.swing.JComboBox<String> flightsStatusCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel statusDayLabel;
    private javax.swing.JButton statusFlightDayButton;
    private javax.swing.JLabel statusFlightLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JScrollPane statusScrollPane;
    private javax.swing.JTextArea statusTextArea;
    private javax.swing.JButton statusWaitingListButton;
    private javax.swing.JTabbedPane tabbedPanel;
    private javax.swing.JComboBox<String> waitingDaysStatusCombo;
    private javax.swing.JLabel waitingListDayStatusLabel;
    // End of variables declaration//GEN-END:variables
    private FlightSchedulerQueries fsQueries;
    private String[] customerNames;
    private String[] dayDates;
    private String[] flightNames;
}